import { RolesBuilder } from 'nest-access-control';

import { UserRole } from './entity/User';

export const roles: RolesBuilder = new RolesBuilder();

roles
  .grant(UserRole.OUTER_API)
  .readAny('check_user_access')
  .grant(UserRole.USER)
  .readAny('certification-exam-logs')
  .updateAny('/read-messages/:dialogId')
  .createAny('contact-us')
  .readAny('communication')
  .readAny('communication/:courseId')
  .createAny('communication/:courseId')
  .updateAny('communication/:courseId')
  .readAny('communication/:courseId/:dialogId')
  .createAny('communication/:courseId/:dialogId')
  .updateAny('communication/:courseId/:dialogId')
  .deleteAny('communication/:courseId/:dialogId')
  .readOwn('user')
  .updateOwn('profile/close')
  .readOwn('profile')
  .updateOwn('profile')
  .updateOwn('profile/avatar')
  .updateOwn('profile/background')
  .createOwn('profile/export')
  .createOwn('reset-password')
  .createOwn('email')
  .readAny('my-organisation')
  .createAny('my-organisation')
  .readAny('my-course')
  .readAny('my-certificate')
  .readOwn('assignment')
  .createOwn('assignment-log')
  .updateOwn('assignment-log')
  .readAny('course-certification')
  .createOwn('course-certification-booking')
  .deleteOwn('course-certification-booking')
  .readAny('faq')
  .readAny('notification')
  .deleteAny('notification')
  .updateOwn('user')
    .grant(UserRole.EDITOR)
    .extend(UserRole.USER)
    .grant(UserRole.ADMIN_GROUP)
    .createAny('certification-exam-logs')
    .readAny('registration-links')
    .createAny('registration-links')
    .updateAny('registration-links')
    .deleteAny('registration-links')
    .deleteAny('admin-student')
    .createAny('admin-student')
    .updateAny('admin-student')
    .createAny('tutor-files')
    .readAny('tutor-files')
    .updateAny('tutor-files')
    .deleteAny('tutor-files')
    .readAny('admin-student')
    .readAny('course')
    .readAny('group')
    .updateOwn('user')
      .extend(UserRole.USER)
      .grant(UserRole.TUTOR)
      .extend(UserRole.EDITOR)
      .createAny('certification-exam-logs')
      .deleteAny('admin-student')
      .createAny('admin-student')
      .updateAny('admin-student')
      .readAny('admin-student')
      .createAny('tutor-files')
      .readAny('tutor-files')
      .updateAny('tutor-files')
      .deleteAny('tutor-files')
      .readOwn('user')
      .updateOwn('user')
        .grant(UserRole.COURSE_CREATOR)
        .deleteAny('course')
        .createAny('course')
        .updateAny('course')
        .readAny('course')
        .readAny('course-assignment')
        .readAny('course-lesson')
        .readAny('course-exam')
        .createAny('course-assignment')
        .createAny('course-lesson')
        .createAny('course-exam')
        .updateAny('course-assignment')
        .updateAny('course-lesson')
        .updateAny('course-exam')
        .deleteAny('course-assignment')
        .deleteAny('course-lesson')
        .deleteAny('course-exam')
        .readAny('notification')
        .readOwn('user')
        .updateOwn('user')
        .readAny('admin-student')
          .grant(UserRole.ADMIN_ORGANISATION)
          .extend(UserRole.COURSE_CREATOR)
          .extend(UserRole.ADMIN_GROUP)
            .deleteAny('group')
            .createAny('group')
            .updateAny('group')
            .deleteAny('admin-group')
            .createAny('admin-group')
            .updateAny('admin-group')
            .readAny('admin-group')
            .deleteAny('admin-organisation')
            .createAny('admin-organisation')
            .updateAny('admin-organisation')
            .readAny('admin-organisation')
            .deleteAny('tutor')
            .createAny('tutor')
            .updateAny('tutor')
            .readAny('tutor')
            .readAny('organisation')
            .updateOwn('user')
            .grant(UserRole.SUPER_ADMIN)
              .createAny('certification-exam-logs')
              .createAny('organisation')
              .updateAny('organisation')
              .readAny('organisation')
              .deleteAny('organisation')
              .createAny('group')
              .updateAny('group')
              .readAny('group')
              .deleteAny('group')
              .updateOwn('user')
                  .grant(UserRole.ADMIN_LMS)
                  .extend(UserRole.ADMIN_ORGANISATION)
                  .extend(UserRole.COURSE_CREATOR)
                    .updateAny('lms-group')
                    .readOwn('lms-group')
                    .createAny('organisation')
                    .updateAny('organisation')
                    .deleteAny('organisation')
                    .createAny('course-creator')
                    .updateAny('course-creator')
                    .readAny('course-creator')
                    .deleteAny('course-creator')
                    .updateOwn('user')
                      .grant(UserRole.XPECTUM_ADMIN)
                      .extend(UserRole.ADMIN_LMS)
                        .createAny('user')
                        .createAny('lms-group')
                        .updateAny('lms-group')
                        .readAny('lms-group')
                        .deleteAny('lms-group')
                        .readOwn('lms-group')
                        .createAny('admin-certification')
                        .readAny('admin-certification')
                        .updateAny('admin-certification')
                        .deleteAny('admin-certification')
                        .createAny('admin-lms')
                        .readAny('admin-lms')
                        .updateAny('admin-lms')
                        .deleteAny('admin-lms')
                        .updateOwn('user')
                        .updateOwn('registration-links')
                        .grant(UserRole.XPECTUM_ADMIN)
                        .extend(UserRole.ADMIN_LMS);

